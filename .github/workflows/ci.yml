name: Build-and-Deploy
on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read          # PAT/keys, not OIDC
    steps:
    - uses: actions/checkout@v4
    - uses: pnpm/action-setup@v3
      with: { version: 9, run_install: false }
    - uses: actions/setup-node@v4
      with: { node-version: '20', cache: 'pnpm' }

    # ---------- Install workspace deps ----------
    - run: pnpm install

    # ---------- Build SvelteKit ----------
    - name: Build SvelteKit
      working-directory: app
      run: pnpm run build

    # -------- CDK Bootstrap --------
    - name: CDK Bootstrap
      working-directory: infra
      env:
        AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:            ${{ secrets.AWS_REGION }}
      run: |
        ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
        npx cdk bootstrap aws://$ACCOUNT/$AWS_REGION --require-approval never

    # -------- CDK Deploy --------
    - name: CDK Deploy
      working-directory: infra
      env:
        AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:            ${{ secrets.AWS_REGION }}
      run: |
        pnpm run build
        npx cdk deploy --require-approval never
        
    # -------- Upload files to S3 --------
    - name: Get S3 bucket name
      working-directory: infra
      env:
        AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:            ${{ secrets.AWS_REGION }}
      run: |
        # Extract bucket name from CDK outputs
        BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name InfraStack --query "Stacks[0].Outputs[?OutputKey=='BucketName'].OutputValue" --output text)
        echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV
        
    - name: Upload SvelteKit build to S3
      env:
        AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:            ${{ secrets.AWS_REGION }}
      run: |
        echo "Uploading files to S3 bucket: $BUCKET_NAME"
        ls -la app/build/
        aws s3 sync app/build/ s3://$BUCKET_NAME/ --delete
        
    - name: Invalidate CloudFront cache
      env:
        AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:            ${{ secrets.AWS_REGION }}
      run: |
        # Get the full CloudFront distribution domain
        CF_DOMAIN=$(aws cloudformation describe-stacks --stack-name InfraStack --query "Stacks[0].Outputs[?OutputKey=='CDNDistributionDomainName'].OutputValue" --output text)
        echo "CloudFront Domain: $CF_DOMAIN"
        
        # List all CloudFront distributions and find the matching one
        DIST_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?DomainName=='$CF_DOMAIN'].Id" --output text)
        echo "Distribution ID: $DIST_ID"
        
        # Only invalidate if we found a distribution ID
        if [ -n "$DIST_ID" ]; then
          # Invalidate the entire distribution
          aws cloudfront create-invalidation --distribution-id $DIST_ID --paths "/*"
        else
          echo "Could not find CloudFront distribution ID. Skipping invalidation."
        fi

